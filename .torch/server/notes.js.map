{"version":3,"sources":["webpack:///./Notes/View.tsx","webpack:///./Notes/index.tsx"],"names":["NotesPage","tagTitle","store","useStore","useEffect","dispatch","type","payload","title","className","href","Notes","notes","useSelector","state","displayNotes","length","map","note","NoteComponent","key","name","date","dayjs","Number","createTime","format","description","createPage","params","context","history","createStore","beforeCreate","fetchData","side","window","__history","create","getState","tagName","tag","tags","find","filter","some","tagId","id","usePaths"],"mappings":"wMAae,SAASA,EAAT,GAAiD,IAA9B,SAAEC,GAA4B,EACxDC,GAAQC,gBAmBd,OAlBAC,gBAAU,KACJH,EACFC,EAAMG,SAAS,CACbC,KAAM,gBACNC,QAAS,CACPC,MAAO,GAAF,OAAKP,EAAL,4BAITC,EAAMG,SAAS,CACbC,KAAM,gBACNC,QAAS,CACPC,MAAO,0BAIZ,IAGD,yBAAKC,UAAU,SACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,SAAd,SACA,yBAAKA,UAAU,kBACb,kBAAC,KAAD,CAAMC,KAAK,cAAcD,UAAU,uBAAnC,mBAKJ,kBAACE,EAAD,OAKN,SAASA,IACP,IAAMC,GAAQC,kBAA4BC,GAAUA,EAAMC,eAE1D,OAAqB,IAAjBH,EAAMI,OAAqB,qDAG7B,6BAASP,UAAU,uBACjB,wBAAIA,UAAU,aACXG,EAAMK,KAAKC,GACV,kBAACC,EAAD,CAAeC,IAAKF,EAAKG,KAAMH,KAAMA,QAW/C,SAASC,EAAT,GAA4C,IAArB,KAAED,GAAmB,EACpCI,EAAOC,IAAMC,OAAON,EAAKO,aAAaC,OAAO,gBAEnD,OACE,wBAAIjB,UAAU,QACZ,yBAAKA,UAAU,wBACb,kBAAC,KAAD,CAAMC,KAAI,iBAAYQ,EAAKG,OACzB,uBAAGZ,UAAU,cAAcS,EAAKV,SAGpC,yBAAKC,UAAU,uBACb,8BAAOa,IAET,uBAAGb,UAAU,oBAAoBS,EAAKS,c,4TC1E5C,SAAeC,OAAU,oBAAC,aAAwC,IAAjC,OAAEC,EAAF,QAAUC,EAAV,QAAmBC,GAAc,EAC1D7B,GAAQ8B,SAERC,EAAY,oBAAG,kBACbC,OAAUhC,EAAO,CAAC,SAAU,SAAU4B,MAD5B,qDAyClB,MArCqB,WAAjBA,EAAQK,OAEVC,OAAOC,UAAYN,GAmCd,CAAE7B,QAAO+B,eAAcK,OAjCf,KACb,IAAMxB,EAAQZ,EAAMqC,WAEpB,GAAIV,WAAQW,QAAS,CACnB,IAAMC,EAAM3B,EAAM4B,KAAKC,MAAMF,GAAQA,EAAIpB,OAASQ,EAAOW,UACzD,GAAIC,EAAK,CACP,IAAM1B,EAAeD,EAAMF,MAAMgC,QAAQ1B,GACvCA,EAAKwB,KAAKG,MAAMC,GAAUL,EAAIM,KAAOD,MAWvC,OATA5C,EAAMG,SAAS,CAAEC,KAAM,oBAAqBC,QAASQ,KAErDiC,QAAS,CACP,CAAC,KAAM,KACP,CAAC,QAAS,UACV,CAAC,OAAQ,eACT,CAACP,EAAIpB,KAAL,sBAA0BoB,EAAIpB,SAGzB,IAAM,kBAAC,EAAD,CAAMpB,SAAUwC,EAAIjC,QAEjCN,EAAMG,SAAS,CAAEC,KAAM,gBAAiBC,SAAS,KACjDyC,QAAS,CAAC,CAAC,KAAM,YAGnBA,QAAS,CACP,CAAC,KAAM,KACP,CAAC,QAAS,YAId,MAAO,IAAM,kBAAC,EAAD,WAzCQ","file":"notes.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { useSelector, useStore } from 'react-redux'\nimport dayjs from 'dayjs'\nimport { Link } from '@src/component'\nimport type { State, Action } from 'client'\nimport type { Note } from 'type'\n\nimport './style.less'\n\nexport type NotesPageProps = {\n  tagTitle?: string\n}\n\nexport default function NotesPage({ tagTitle }: NotesPageProps) {\n  const store = useStore<State, Action>()\n  useEffect(() => {\n    if (tagTitle) {\n      store.dispatch({\n        type: 'SET_META_DATA',\n        payload: {\n          title: `${tagTitle} | Notes by Ma Tianqi`,\n        },\n      })\n    } else {\n      store.dispatch({\n        type: 'SET_META_DATA',\n        payload: {\n          title: 'Notes by Ma Tianqi',\n        },\n      })\n    }\n  }, [])\n\n  return (\n    <div className=\"notes\">\n      <div className=\"title-container\">\n        <h1 className=\"title\">Notes</h1>\n        <div className=\"link-container\">\n          <Link href=\"/notes/tags\" className=\"link-with-underline\">\n            View all tags\n          </Link>\n        </div>\n      </div>\n      <Notes />\n    </div>\n  )\n}\n\nfunction Notes() {\n  const notes = useSelector<State, Note[]>((state) => state.displayNotes)\n\n  if (notes.length === 0) return <>Stay tuned...</>\n\n  return (\n    <section className=\"note-list-container\">\n      <ul className=\"note-list\">\n        {notes.map((note) => (\n          <NoteComponent key={note.name} note={note} />\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport type NoteProps = {\n  note: Note\n}\n\nfunction NoteComponent({ note }: NoteProps) {\n  const date = dayjs(Number(note.createTime)).format('MMMM D, YYYY')\n\n  return (\n    <li className=\"note\">\n      <div className=\"note-title-container\">\n        <Link href={`/notes/${note.name}`}>\n          <p className=\"note-title\">{note.title}</p>\n        </Link>\n      </div>\n      <div className=\"note-time-container\">\n        <time>{date}</time>\n      </div>\n      <p className=\"note-description\">{note.description}</p>\n    </li>\n  )\n}\n","import React from 'react'\nimport { usePaths } from '@src/hook'\nimport { createPage } from '@src/share'\nimport { fetchData } from '@src/api'\nimport createStore from '@src/store'\nimport View from './View'\n\nexport default createPage(async ({ params, context, history }) => {\n  const store = createStore()\n\n  const beforeCreate = async () => {\n    await fetchData(store, ['/notes', '/tags'], context)\n  }\n\n  if (context.side === 'client')\n    // @ts-ignore\n    window.__history = history\n\n  const create = () => {\n    const state = store.getState()\n\n    if (params?.tagName) {\n      const tag = state.tags.find((tag) => tag.name === params.tagName)\n      if (tag) {\n        const displayNotes = state.notes.filter((note) =>\n          note.tags.some((tagId) => tag.id === tagId)\n        )\n        store.dispatch({ type: 'SET_DISPLAY_NOTES', payload: displayNotes })\n\n        usePaths([\n          ['me', '/'],\n          ['notes', '/notes'],\n          ['tags', '/notes/tags'],\n          [tag.name, `/notes/tags/${tag.name}`],\n        ])\n\n        return () => <View tagTitle={tag.title} />\n      } else {\n        store.dispatch({ type: 'SET_NOT_FOUND', payload: true })\n        usePaths([['me', '/']])\n      }\n    } else {\n      usePaths([\n        ['me', '/'],\n        ['notes', '/notes'],\n      ])\n    }\n\n    return () => <View />\n  }\n\n  return { store, beforeCreate, create }\n})\n"],"sourceRoot":""}