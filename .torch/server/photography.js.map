{"version":3,"sources":["webpack:///./Photography/View.tsx","webpack:///./Photography/index.ts"],"names":["Photography","className","href","Photos","pictures","useStore","getState","displayPictures","years","Object","keys","sort","a","b","Number","map","year","PhotosByYear","key","months","id","month","PhotosByMonth","groupedPictures","length","result","i","push","groupPictures","group","Array","isArray","DoublePhoto","left","right","SinglePhoto","picture","Photo","ImageWrapper","styled","loadingAnimation","keyframes","Placeholder","StyledImage","name","url","location","date","dateStr","dayjs","format","LazyImage","src","alt","refPlaceholder","React","removePlaceholder","current","remove","ref","onLoad","onError","createPage","params","context","history","usePaths","store","createStore","beforeCreate","fetchData","create","state","onlyYear","picturesByYear","displayNotes","dispatch","type","payload","View"],"mappings":"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","file":"photography.js","sourcesContent":["import React from 'react'\nimport { useStore } from 'react-redux'\nimport dayjs from 'dayjs'\nimport LazyLoad from 'react-lazyload'\nimport styled, { keyframes } from 'styled-components'\nimport { Link, BackToTop } from '@src/component'\nimport type { State, Action } from '@src/store'\nimport type { Picture } from 'type'\n\nimport './index.less'\n\nexport default function Photography() {\n  return (\n    <div className=\"photography\">\n      <div className=\"title-container\">\n        <h1 className=\"title\">Photography</h1>\n        <div className=\"link-container\">\n          <Link href=\"/photography/months\" className=\"link-with-underline\">\n            View all months\n          </Link>\n        </div>\n      </div>\n      <Photos />\n      <BackToTop />\n    </div>\n  )\n}\n\nfunction Photos() {\n  const store = useStore<State, Action>()\n  const pictures = store.getState().displayPictures\n  const years = Object.keys(pictures).sort((a, b) => Number(a) - Number(b))\n\n  return (\n    <div className=\"photos\">\n      {years.map((year) => {\n        return <PhotosByYear key={year} year={year} />\n      })}\n    </div>\n  )\n}\n\nfunction PhotosByYear({ year }: { year: string }) {\n  const store = useStore<State, Action>()\n  const pictures = store.getState().displayPictures[year]\n  const months = Object.keys(pictures).sort((a, b) => Number(a) - Number(b))\n\n  return (\n    <div className=\"photos-year\">\n      <h2 id={`year-${year}`}>\n        <a href={`#year-${year}`} className=\"link-with-underline\">\n          {year}\n        </a>\n      </h2>\n      {months.map((month) => {\n        return (\n          <PhotosByMonth key={`${year}-${month}`} year={year} month={month} />\n        )\n      })}\n    </div>\n  )\n}\n\nfunction PhotosByMonth({ year, month }: { year: string; month: string }) {\n  const store = useStore<State, Action>()\n  const pictures = store.getState().displayPictures[year][month]\n  const groupedPictures = groupPictures(pictures)\n\n  return (\n    <div className=\"photos-month\">\n      <h3 id={`month-${month}`}>\n        <a href={`#month-${month}`} className=\"link-with-underline\">\n          {month}\n        </a>\n      </h3>\n      <div className=\"photo-list\">\n        {groupedPictures.map((group) => {\n          if (Array.isArray(group)) {\n            return (\n              <DoublePhoto key={group[0].id} left={group[0]} right={group[1]} />\n            )\n          } else {\n            return <SinglePhoto key={group.id} picture={group} />\n          }\n        })}\n      </div>\n    </div>\n  )\n}\n\nfunction DoublePhoto({ left, right }: { left: Picture; right: Picture }) {\n  return (\n    <div className=\"double-photo\">\n      <Photo {...left} />\n      <Photo {...right} />\n    </div>\n  )\n}\n\nfunction SinglePhoto({ picture }: { picture: Picture }) {\n  return (\n    <div className=\"single-photo\">\n      <Photo {...picture} />\n    </div>\n  )\n}\nconst ImageWrapper = styled.div`\n  padding: 56.25% 0 0;\n  position: relative;\n`\n\nconst loadingAnimation = keyframes`\n  0% {\n    background-color: #fff;\n  }\n  50% {\n    background-color: #ccc;\n  }\n  100% {\n    background-color: #fff;\n  }\n`\n\nconst Placeholder = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  animation: ${loadingAnimation} 1s infinite;\n  width: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n`\n\nfunction Photo({ name, url, location, date }: Picture) {\n  const dateStr = dayjs(Number(date)).format('MMMM D, YYYY')\n  return (\n    <div className=\"photo\">\n      <LazyImage src={url} alt={name} />\n      <div className=\"title\">\n        <div className=\"title-content\">{name}</div>\n      </div>\n      <div className=\"info\">\n        <div className=\"location\">{location}</div>\n        <div className=\"date\">{dateStr}</div>\n      </div>\n    </div>\n  )\n}\n\nexport type LazyImageProps = {\n  src: string\n  alt: string\n}\nconst LazyImage = ({ src, alt }: LazyImageProps) => {\n  const refPlaceholder = React.useRef<HTMLDivElement | null>()\n\n  const removePlaceholder = () => {\n    refPlaceholder.current?.remove()\n  }\n\n  return (\n    <ImageWrapper>\n      {/** @ts-ignore */}\n      <Placeholder ref={refPlaceholder} />\n      <LazyLoad>\n        <StyledImage\n          onLoad={removePlaceholder}\n          onError={removePlaceholder}\n          src={src}\n          alt={alt}\n        />\n      </LazyLoad>\n    </ImageWrapper>\n  )\n}\n\ntype PictureGroup = [Picture, Picture]\n\nfunction groupPictures(pictures: Picture[]): (PictureGroup | Picture)[] {\n  const length = pictures.length\n  let result: (PictureGroup | Picture)[] = []\n\n  for (let i = 0; i + 1 < length; i = i + 2) {\n    result.push([pictures[i], pictures[i + 1]])\n  }\n\n  if (length % 2 === 1) {\n    result.push(pictures[length - 1])\n  }\n\n  return result\n}\n","import { createPage } from '@src/share'\nimport createStore from '@src/store'\nimport { usePaths } from '@src/hook'\nimport { fetchData } from '@src/api'\nimport View from './View'\n\nconst Home = createPage(async ({ params, context, history }) => {\n  usePaths([\n    ['me', '/'],\n    ['photography', '/'],\n  ])\n\n  const store = createStore()\n\n  const beforeCreate = async () => {\n    await fetchData(store, ['/pictures'], context)\n  }\n\n  const create = () => {\n    const state = store.getState()\n\n    const year = params?.year || params?.onlyYear\n    if (year) {\n      const picturesByYear = state.pictures[year]\n      if (picturesByYear) {\n        if (params?.month) {\n          const pictures = picturesByYear[params.month]\n          if (pictures) {\n            const displayNotes = {\n              [year]: {\n                [params.month]: pictures,\n              },\n            }\n            store.dispatch({\n              type: 'SET_DISPLAY_PICTURES',\n              payload: displayNotes,\n            })\n\n            usePaths([\n              ['me', '/'],\n              ['photography', '/photography'],\n              [year, `/photography/${year}`],\n              [params.month, `/photography/${year}/${params.month}`],\n            ])\n          } else {\n            history.push(`/photography/${year}`)\n          }\n        } else {\n          const displayNotes = {\n            [year]: picturesByYear,\n          }\n          store.dispatch({\n            type: 'SET_DISPLAY_PICTURES',\n            payload: displayNotes,\n          })\n\n          usePaths([\n            ['me', '/'],\n            ['photography', '/photography'],\n            [year, `/photography/${year}`],\n          ])\n        }\n      } else {\n        history.push(`/photography`)\n      }\n    } else {\n      store.dispatch({ type: 'SET_DISPLAY_PICTURES', payload: state.pictures })\n\n      usePaths([\n        ['me', '/'],\n        ['photography', '/photography'],\n      ])\n    }\n\n    return View\n  }\n\n  return { store, beforeCreate, create }\n})\n\nexport default Home\n"],"sourceRoot":""}